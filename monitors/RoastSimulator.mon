
event ColorTrack{
	float currentBeanVolt;
}

event DrumTemperature{
	float currentDrumTemperature;
}

/** This monitor is responsible for ...  */
monitor RoastDrumSimulator {

	integer beanIllustrator := 1; //parses the number so the program can display the actual color of the bean in a range from 1 to 100; Where 1 is green and very black is 100;
	integer currentBeanTemp := 0; // average temp;

	float currentDrumTemp := preheatDrum(); // default temp in drum before roasting is just below 200, e.g. 190;
	float currentBeanVolt := BeanColorVolt.MAXIMUM; 
	
	boolean highRoastTemp := false; // used as a gate to decrease the temp;
	boolean lowRoastTemp := true; // used as a gate to increase the temp;
	
	action onload() {
		log Message.LOADED_ROAST_SIMULATOR at INFO;
		initialize();
	}

	action initialize(){
			heatDrum();
			colorTrack();
	}
	
	/** 
	@return ...
	*/
	action preheatDrum() returns float{
		return (Temperature.PREHEAT_NUMBER).rand() + BeanTemp.PALE;
	}
	
	/** 
		...
	*/
	action heatDrum(){		
		listener listen := on all wait (Delay.TWO_SECONDS){
			float randomTemp := (BeanRandom.TEMP_INCREMENTER).rand();				
			currentDrumTemp := (currentDrumTemp + randomTemp);
			send DrumTemperature(currentDrumTemp) to Channel.ROAST;
			log "Simulation RoastDrum temp: " + currentDrumTemp.toString() at INFO;

		}
	}	
	
	/** 
		....
	*/
	action colorTrack(){
		listener listen := on all wait (Delay.ONE_SECOND){
			float randomVoltIncrease := (BeanTracker.COLOR_CHANGER).rand(); // the beans spin while in the drum, therefore their temperature might differ slightly. Plus, making the graph more realistic;
			float gate := (BeanRandom.GATE_BOUND).rand();
			integer beanColorIllustrator := getBeanIllustrator(currentBeanVolt);

			implementBeanVolt(gate, randomVoltIncrease);
			send ColorTrack(currentBeanVolt) to Channel.ROAST;
			log "Simulation RoastDrum volt: " + currentBeanVolt.toString() at INFO;
		}
	}
	
	/** 
	@param gate ...
	@param randomVoltIncrease ...
	*/
	action implementBeanVolt(float gate, float randomVoltIncrease){
		if gate <= BeanTracker.COLOR_GATE_ENTRY {
			currentBeanVolt := currentBeanVolt + randomVoltIncrease;
		}else{
			currentBeanVolt := currentBeanVolt - BeanTracker.COLOR_CHANGER; // 0-100 Volts DC; 280 maximum temp in drum -> 280/100 = 2.8; Therefore, 2.8 decrease per degree celsius;
		}
	}
	
	/** 
	@param beanVolt ...
	@return ....
		formula: the color scheme graph contains half the range the beanvolt has
		(i.e. BeanVolt starts at 100 and goes down to 0, colorScheme starts at 0 and goes up to 50).
		Hence, get half of bean volt and remove 50 since the colorScheme operates in the 0-50 range;
	*/
	action getBeanIllustrator(float beanVolt) returns integer {
		return (getHalf(beanVolt) - ColorScheme.SIZE).abs(); 
	}
	
	action getHalf(float value) returns integer{
		return value.floor() / Divider.BY_HALF;
	}
}
 