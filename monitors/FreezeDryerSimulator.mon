
/** This monitor is responsible for ...  */

event FreezerDryerMoisture{
	float currentMoisture;
}

event FreezerDryerTemp{
	float currentTemp;
}

event FreezerDryerVacuum{
	float currentVacuum;
}

event Alert{
	string asd;
}


monitor FreezeDryerSimulator {

	float currentMoisture := 100.0;
	float currentTemp := 60.0;
	float currentVacuum := 150.0;
		
	boolean tempGate := false;
	boolean vacuumGate := false;
	
	action onload() {
		listenning();

		initialize();
	}

	action initialize(){
		log Message.LOADED_FREEZE_DRYER_SIMULATOR at INFO;
		moistureEvaporating();
		implementTubeTemperature();
		implementTubeVacuum();
	}
		
	action moistureEvaporating(){
		listener listen := on all wait (2.0){
			float random := (FreezerDryer.RANDOM_FLUCTUATION_NUMBER).rand();
			currentMoisture := currentMoisture - random;
			send FreezerDryerMoisture(currentMoisture) to Channel.FREEZE_DRYER;
		}
	}
	
	action implementTubeTemperature(){
		listener listen := on all wait (3.0){
			float random := (1.0).rand();
			currentTemp := implementFluctuation(tempGate, currentTemp, random);
			send FreezerDryerTemp(currentTemp) to Channel.FREEZE_DRYER;
		}
	}
	
	action implementTubeVacuum(){
		listener listen := on all wait (2.0){
			float random := (3.0).rand(); 
			//TODO change gate to be e.g. 0.4 and the random generator to generate a number
			// between 0.0 and 1.0, see colorTrack()
			currentVacuum := implementFluctuation(vacuumGate, currentVacuum, random);
			send FreezerDryerVacuum(currentVacuum) to Channel.FREEZE_DRYER;
			log "VACUUM ======== " + currentVacuum.toString() at INFO;
		}
	}
	
	action implementFluctuation(boolean gate, float currentValue, float randomNumber) returns float{
		if gate {
			currentValue := currentValue - randomNumber;
			gate := false;
		}else{
			currentValue := currentValue + randomNumber;
			gate := true;
		}
		
		return currentValue;
	}
	
	action listenning(){
		monitor.subscribe(Channel.FREEZE_DRYER_SIMULATOR);
		on all Alert() as a{
			log "ALERT === ===== === " + a.asd at INFO;
		}
	}
	
	
}
