
/** This monitor is responsible for ...  */

event CaffeineEvent{
	float currentCaffeine;
}

event VolatileOilsEvent{
	float currentVolatileOils;
}

event OrganicAcidsEvent{
	float currentOrganicAcids;
}

event ExtractorTemperature{
	float currentTemperature;
}

monitor ExtractorSimulator {

	float currentCaffeine := 1.0;
	float currentVolatileOils := 3.0;
	float currentOrganicAcids := 8.0;
	float currentTemp := preheatExtractor();
	float currentCoffeeToWaterRatio := 0.0;
	
	boolean highExtractionTemp := false; // used as a gate to decrease the temp;
	boolean lowExtractionTemp := true; // used as a gate to increase the temp;
	
	float caffeineTimeCounter := 0.0;
	float oilsTimeCounter := 0.0;
	float acidsTimeCounter := 0.0;
	
	//Side value => Amount of compound (Unit) - A
	
	action onload() {
		log Message.LOADED_EXTRACT_SIMULATOR at INFO;
		initialize();
	}

	action initialize(){
		implementExtractorTemp();
		extractAll();
	}

	action extractAll(){
		extractCaffeine();
		extractVolatileOils();
		extractOrganicAcids();
	}

	/** 
	...
	*/
	action extractCaffeine(){
		listener listen := on all wait (Delay.ONE_SECOND){
			currentCaffeine := blackBodyFormula(caffeineTimeCounter, Caffeine.GRAPH_HEIGHT, Caffeine.GRAPH_LENGTH);  
			send CaffeineEvent(currentCaffeine) to Channel.EXTRACTOR; 
			caffeineTimeCounter := caffeineTimeCounter + Time.ADD_SECOND;
		}
	}

	/** 
	...
	*/
	action extractVolatileOils(){
		listener listen := on all wait (Delay.ONE_SECOND){		
			currentVolatileOils := blackBodyFormula(oilsTimeCounter, VolatileOils.GRAPH_HEIGHT, VolatileOils.GRAPH_LENGTH);	
			send VolatileOilsEvent(currentVolatileOils) to Channel.EXTRACTOR; 
			oilsTimeCounter := oilsTimeCounter + Time.ADD_SECOND;
		}
	}
	
	/** 
	...
	*/	
	action extractOrganicAcids(){
		listener listen := on all wait (Delay.ONE_SECOND){
			currentOrganicAcids := blackBodyFormula(acidsTimeCounter, OrganicAcids.GRAPH_HEIGHT, OrganicAcids.GRAPH_LENGTH); 
			send OrganicAcidsEvent(currentOrganicAcids) to Channel.EXTRACTOR; 
			acidsTimeCounter := acidsTimeCounter + Time.ADD_SECOND;
		}
	}
	
	/** 
		Increases/decreases the temperature in the extractor drum;
		
	*/
	action implementExtractorTemp(){
		listener listen := on all wait (Delay.TWO_SECONDS){
			float randomTempIncrementor := (2.0).rand(); // TODO FIX MAGIC NUMBER;
			currentTemp := currentTemp + randomTempIncrementor;
			send ExtractorTemperature(currentTemp) to Channel.EXTRACTOR; 
		}
	}
	
	/** 
	@param time = the time that has passed in seconds;
	@param height = increase value for higher function and decrease for lower; 7.7 is a random default value;
	@param length = increase to shrink function, decrease to expand function; 0.188 is a random default value;
	@return Max Planck's formula for Black-body radition
	*/
	action blackBodyFormula(float time, float height, float length) returns float{
		return (height * (length * time).pow(Math.CUBED)) / ( (float.E).pow(length * time) - Math.PLANCK_FORMULA_SUBTRACTOR);
	}
	
	/** 
	...
	*/
	action updateCoffeeToWaterRatio(){	
		//send ... to ...
	}
	
	action preheatExtractor() returns float{
		return (Temperature.EXTRACTOR_PREHEAT).rand() + Temperature.EXTRACTOR_INITIAL;
	}
	
}
